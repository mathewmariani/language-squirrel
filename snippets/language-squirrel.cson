'.source.nut':
  # class snippets
  # 'class'
  #   'prefix': 'class'
  #   'body': 'class ${0:functionName} {\n\tconstructor() { }\n}'
  'function':
    'prefix': 'func'
    'body': 'function ${1:functionName} (${2:arg}) {\n\t${0:# body}\n}'
  # 'metamethod._add':
  #   'prefix': '_add'
  #   'body': 'function _add(other) {\n\t${0:# body}\n}'
  # 'metamethod._sub':
  #   'prefix': '_sub'
  #   'body': 'function _sub(other) {\n\t${0:# body}\n}'
  # 'metamethod._mul':
  #   'prefix': '_mul'
  #   'body': 'function _mul(other) {\n\t${0:# body}\n}'
  # 'metamethod._div':
  #   'prefix': '_div'
  #   'body': 'function _div(other) {\n\t${0:# body}\n}'
  # 'metamethod._unm':
  #   'prefix': '_unm'
  #   'body': 'function _unm(other) {\n\t${0:# body}\n}'
  # 'metamethod._modulo':
  #   'prefix': '_modulo'
  #   'body': 'function _modulo(other) {\n\t${0:# body}\n}'
  # 'metamethod._set':
  #   'prefix': '_set'
  #   'body': 'function _set() {\n\t${0:# body}\n}'
  # 'metamethod._get':
  #   'prefix': '_get'
  #   'body': 'function _get() {\n\t${0:# body}\n}'
  # 'metamethod._typeof':
  #   'prefix': '_typeof'
  #   'body': 'function _typeof() {\n\t${0:# body}\n}'
  # 'metamethod._nexti':
  #   'prefix': '_nexti'
  #   'body': 'function _nexti() {\n\t${0:# body}\n}'
  # 'metamethod._cmp':
  #   'prefix': '_cmp'
  #   'body': 'function _cmp() {\n\t${0:# body}\n}'
  # 'metamethod._call':
  #   'prefix': '_call'
  #   'body': 'function _call() {\n\t${0:# body}\n}'
  # 'metamethod._delslot':
  #   'prefix': '_delslot'
  #   'body': 'function _delslot() {\n\t${0:# body}\n}'
  # 'metamethod._tostring':
  #   'prefix': '_tostring'
  #   'body': 'function _tostring() {\n\t${0:# body}\n}'


  # local variable snippets
  'local variable':
    'prefix': 'local'
    'body': 'local ${1:x} = ${0:1};'
  'local function':
    'prefix': 'lfunc'
    'body': 'local ${1:functionName} = function(${2:arg}) {\n\t${0:# body}\n};'
  'local class':
    'prefix': 'lclass'
    'body': 'local ${1:className} = class {\n\t${0:# body}\n};'

  # anonymous variables
  'anonymous function':
    'prefrix': 'afunc'
    'body': 'function(${1:arg}) {\n\t${0:# body}\n};'

  # loop snippets
  'while':
    'prefix': 'while'
    'body': 'while (${1:condition}) {\n\t${0:# body}\n}'
  'for':
    'prefix': 'for'
    'body': 'for (local ${1:i} = ${2:0}; i < ${3:10}; i++) {\n\t${0:# body}\n}'
  'foreach':
    'prefix': 'fore'
    'body': 'foreach (${1:idx}, ${2:val} in ${3:container}) {\n\t${0:# body}\n}'

  # control flow snippets
  'if conditional':
    'prefix': 'if',
    'body': 'if (${1:cond}) {\n\t${0:# body}\n}'
  'if else conditional':
    'prefix': 'ife',
    'body': 'if (${1:cond}) {\n\t${0:# body}\n} else {\n\t${1:# body}\n}'
  'else':
    'prefix': 'els',
    'body': 'else {\n\t${0:# body}\n}'
  'else if conditional':
    'prefix': 'elif',
    'body': 'else if (${1:cond}) {\n\t${0:# body}\n}'

  # math snippets
  'math.abs':
    'prefix': 'abs'
    'body': 'abs(${0:value});'
  'math.acos':
    'prefix': 'acos'
    'body': 'acos(${0:cosine});'
  'math.asin':
    'prefix': 'asin'
    'body': 'asin(${0:sine});'
  'math.atan':
    'prefix': 'atan'
    'body': 'atan(${0:tangent});'
  'math.atan2':
    'prefix': 'atan2'
    'body': 'atan2(${0:adjacentLength}, ${1:oppositeLength});'
  'math.ceil':
    'prefix': 'ceil'
    'body': 'ceil(${0:value});'
  'math.cos':
    'prefix': 'cos'
    'body': 'cos(${0:angle});'
  'math.exp':
    'prefix': 'exp'
    'body': 'exp(${0:power});'
  'math.fabs':
    'prefix': 'fabs'
    'body': 'fabs(${0:value});'
  'math.floor':
    'prefix': 'floor'
    'body': 'floor(${0:value});'
  'math.log':
    'prefix': 'log'
    'body': 'log(${0:value});'
  'math.log10':
    'prefix': 'log10'
    'body': 'log10(${0:value});'
  'math.pow':
    'prefix': 'pow'
    'body': 'pow(${0:base}, ${1:exponent});'
  'math.rand':
    'prefix': 'rand'
    'body': 'rand();'
  'math.sin':
    'prefix': 'sin'
    'body': 'sin(${0:angle});'
  'math.sqrt':
    'prefix': 'sqrt'
    'body': 'sqrt(${0:value});'
  'math.tan':
    'prefix': 'tan'
    'body': 'tan(${0:angle});'
